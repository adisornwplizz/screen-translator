import sys
import os
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                            QHBoxLayout, QPushButton, QTextEdit, QLabel, 
                            QFrame, QSplitter, QGroupBox, QProgressBar,
                            QCheckBox, QSpinBox, QSlider, QComboBox)
from PyQt5.QtCore import Qt, QTimer, QRect, pyqtSignal, QThread, pyqtSlot, QPoint
from PyQt5.QtGui import QPainter, QPen, QColor, QFont, QCursor
from PIL import Image

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import modules
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from translation.ocr import OCR
from translation.translator import Translator
from translation.ollama_service import ollama_service
from translation.ollama_translator import OllamaTranslator
from config import UI_CONFIG, OLLAMA_CONFIG
from gui.selection_widget import SelectionWidget


class OCRWorker(QThread):
    """Worker thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á UI"""
    finished = pyqtSignal(str, float)  # text, confidence
    error = pyqtSignal(str)  # error message
    
    def __init__(self, ocr, screenshot):
        super().__init__()
        self.ocr = ocr
        self.screenshot = screenshot
        self._is_cancelled = False
    
    def run(self):
        """‡∏£‡∏±‡∏ô OCR ‡πÉ‡∏ô background thread"""
        try:
            if self._is_cancelled:
                return
                
            # ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
            text, confidence = self.ocr.get_text_with_confidence(self.screenshot)
            
            if not self._is_cancelled:
                self.finished.emit(text, confidence)
                
        except Exception as e:
            if not self._is_cancelled:
                self.error.emit(str(e))
    
    def cancel(self):
        """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"""
        self._is_cancelled = True
        self.quit()
        self.wait(2000)  # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡πâ thread ‡∏´‡∏¢‡∏∏‡∏î


class Window(QMainWindow):
    def __init__(self, title="Screen Translator"):
        super().__init__()
        self.title = title
        self.setWindowTitle(title)
        self.setGeometry(100, 100, 800, 700)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏π‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 4 columns
        
        # ‚ú® Use the enhanced SelectionWidget
        self.selection_widget = SelectionWidget()
        self.selection_widget.position_changed.connect(self.on_selection_changed)
        
        # Rest of initialization...
        self.current_selection = QRect(100, 100, 300, 200)
        self.is_capturing = False
        
        # Ollama configuration
        self.vision_model = OLLAMA_CONFIG['vision_model']
        self.translation_model = OLLAMA_CONFIG['translation_model']
        # Always reset custom_prompt to empty on app restart (as per requirement)
        self.custom_prompt = ""  # Reset to default on restart
        OLLAMA_CONFIG['custom_prompt'] = ""  # Update config too
        
        self.ocr = OCR(vision_model=self.vision_model)
        self.translator = Translator(service='ollama', ollama_model=self.translation_model, custom_prompt=self.custom_prompt)
        self.auto_translate = True
        self.target_language = 'th'
        self.last_detected_text = ""
        
        # OCR Worker thread ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏á
        self.ocr_worker = None
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û
        self.capture_interval = UI_CONFIG.get('capture_interval', 2000)  # default 2000ms
        
        self.setup_ui()
        
        # Timer setup
        self.capture_timer = QTimer()
        self.capture_timer.timeout.connect(self.capture_and_process)
        
    def setup_ui(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ UI - Windows Black & White Theme"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Windows-inspired styling
        self.setStyleSheet("""
            QMainWindow {
                background-color: #ffffff;
                color: #000000;
            }
            QWidget {
                background-color: #ffffff;
                color: #000000;
                font-family: 'Segoe UI', Arial, sans-serif;
            }
            QGroupBox {
                font-weight: bold;
                font-size: 11px;
                border: 2px solid #cccccc;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: #f8f8f8;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                background-color: #ffffff;
                color: #000000;
            }
        """)
        
        # Layout ‡∏´‡∏•‡∏±‡∏Å
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(8)
        main_layout.setContentsMargins(10, 10, 10, 10)
        
        # 1. ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î
        text_group = QGroupBox("üìÑ ‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•")
        text_layout = QVBoxLayout(text_group)
        
        self.translated_text = QTextEdit()
        self.translated_text.setFont(QFont("Segoe UI", 12))
        self.translated_text.setPlaceholderText("‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...")
        self.translated_text.setStyleSheet("""
            QTextEdit { 
                border: 2px solid #cccccc; 
                border-radius: 4px; 
                padding: 8px; 
                background-color: #ffffff;
                color: #000000;
                selection-background-color: #0078d4;
                selection-color: #ffffff;
            }
            QTextEdit:focus {
                border: 2px solid #0078d4;
            }
        """)
        text_layout.addWidget(self.translated_text)
        main_layout.addWidget(text_group, 1)  # ‡πÉ‡∏´‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        
        # 2. ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 3 column
        bottom_layout = QHBoxLayout()
        bottom_layout.setSpacing(8)
        
        # Column 1: ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        control_group = QGroupBox("üéÆ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°")
        control_layout = QVBoxLayout(control_group)
        
        self.start_button = QPushButton("‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°")
        self.start_button.clicked.connect(self.start_capture)
        self.start_button.setStyleSheet("""
            QPushButton { 
                background-color: #0078d4; 
                color: white; 
                padding: 8px 16px; 
                font-size: 11px;
                font-weight: bold; 
                border: 1px solid #005a9e;
                border-radius: 3px;
                min-width: 80px;
            }
            QPushButton:hover { 
                background-color: #106ebe; 
                border: 1px solid #005a9e;
            }
            QPushButton:pressed {
                background-color: #005a9e;
            }
            QPushButton:disabled {
                background-color: #f3f2f1;
                color: #a19f9d;
                border: 1px solid #d2d0ce;
            }
        """)
        
        self.stop_button = QPushButton("‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î")
        self.stop_button.clicked.connect(self.stop_capture)
        self.stop_button.setEnabled(False)
        self.stop_button.setStyleSheet("""
            QPushButton { 
                background-color: #d83b01; 
                color: white; 
                padding: 8px 16px; 
                font-size: 11px;
                font-weight: bold; 
                border: 1px solid #a4262c;
                border-radius: 3px;
                min-width: 80px;
            }
            QPushButton:hover { 
                background-color: #f2583e; 
                border: 1px solid #a4262c;
            }
            QPushButton:pressed {
                background-color: #a4262c;
            }
            QPushButton:disabled {
                background-color: #f3f2f1;
                color: #a19f9d;
                border: 1px solid #d2d0ce;
            }
        """)
        
        # ‡∏õ‡∏∏‡πà‡∏° toggle visibility
        self.toggle_button = QPushButton("üëÅÔ∏è ‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á")
        self.toggle_button.clicked.connect(self.toggle_selection_visibility)
        self.toggle_button.setToolTip("‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (Ctrl+V)")
        self.toggle_button.setStyleSheet("""
            QPushButton { 
                background-color: #ffffff; 
                color: #323130; 
                padding: 8px 16px; 
                font-size: 11px;
                font-weight: normal; 
                border: 1px solid #8a8886;
                border-radius: 3px;
                min-width: 100px;
            }
            QPushButton:hover { 
                background-color: #f3f2f1; 
                border: 1px solid #323130;
            }
            QPushButton:pressed {
                background-color: #edebe9;
            }
        """)
        
        control_layout.addWidget(self.start_button)
        control_layout.addWidget(self.stop_button)
        control_layout.addWidget(self.toggle_button)
        bottom_layout.addWidget(control_group)
        
        # Column 2: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
        interval_group = QGroupBox("‚è±Ô∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤")
        interval_layout = QVBoxLayout(interval_group)
        
        interval_label = QLabel("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ):")
        interval_label.setStyleSheet("QLabel { color: #323130; font-size: 11px; }")
        
        self.interval_slider = QSlider(Qt.Horizontal)
        self.interval_slider.setMinimum(UI_CONFIG.get('capture_interval_min', 500) // 1000)  
        self.interval_slider.setMaximum(UI_CONFIG.get('capture_interval_max', 10000) // 1000)  
        self.interval_slider.setValue(self.capture_interval // 1000)  
        self.interval_slider.valueChanged.connect(self.on_interval_changed)
        self.interval_slider.setStyleSheet("""
            QSlider::groove:horizontal {
                border: 1px solid #d2d0ce;
                height: 6px;
                background: #f3f2f1;
                border-radius: 3px;
            }
            QSlider::handle:horizontal {
                background: #0078d4;
                border: 1px solid #005a9e;
                width: 18px;
                margin: -7px 0;
                border-radius: 9px;
            }
            QSlider::handle:horizontal:hover {
                background: #106ebe;
            }
        """)
        
        self.interval_value_label = QLabel(f"{self.capture_interval // 1000}s")
        self.interval_value_label.setMinimumWidth(40)
        self.interval_value_label.setStyleSheet("QLabel { font-weight: bold; color: #0078d4; font-size: 11px; }")
        
        interval_layout.addWidget(interval_label)
        interval_layout.addWidget(self.interval_slider)
        interval_layout.addWidget(self.interval_value_label)
        bottom_layout.addWidget(interval_group)
        
        # Column 3: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status_group = QGroupBox("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
        status_layout = QVBoxLayout(status_group)
        
        self.position_label = QLabel("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: X=100, Y=100, ‡∏Å‡∏ß‡πâ‡∏≤‡∏á=300, ‡∏™‡∏π‡∏á=200")
        self.position_label.setStyleSheet("QLabel { font-size: 10px; color: #605e5c; }")
        
        self.status_label = QLabel("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        self.status_label.setStyleSheet("QLabel { color: #107c10; font-size: 10px; font-weight: bold; }")
        
        # Help text
        self.help_label = QLabel("üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ: ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢ | ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå")
        self.help_label.setStyleSheet("QLabel { font-size: 9px; color: #8a8886; font-style: italic; }")
        self.help_label.setWordWrap(True)
        
        status_layout.addWidget(self.position_label)
        status_layout.addWidget(self.status_label)
        status_layout.addWidget(self.help_label)
        bottom_layout.addWidget(status_group)
        
        # Column 4: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Ollama Models
        ollama_group = QGroupBox("ü§ñ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Ollama")
        ollama_layout = QVBoxLayout(ollama_group)
        
        # Vision Model Selection
        vision_label = QLabel("AI Vision Model:")
        vision_label.setStyleSheet("QLabel { color: #323130; font-size: 11px; }")
        
        self.vision_model_combo = QComboBox()
        self.vision_model_combo.setStyleSheet("""
            QComboBox {
                border: 1px solid #8a8886;
                border-radius: 3px;
                padding: 4px;
                background-color: #ffffff;
                color: #323130;
                font-size: 10px;
            }
            QComboBox:drop-down {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 20px;
                border-left: 1px solid #8a8886;
            }
            QComboBox::down-arrow {
                image: none;
                border: 2px solid #323130;
                width: 6px;
                height: 6px;
                border-top: none;
                border-right: none;
                border-bottom-right-radius: 1px;
            }
        """)
        self.vision_model_combo.currentTextChanged.connect(self.on_vision_model_changed)
        
        # Translation Model Selection
        translation_label = QLabel("Translation Model:")
        translation_label.setStyleSheet("QLabel { color: #323130; font-size: 11px; }")
        
        self.translation_model_combo = QComboBox()
        self.translation_model_combo.setStyleSheet(self.vision_model_combo.styleSheet())
        self.translation_model_combo.currentTextChanged.connect(self.on_translation_model_changed)
        
        # Custom Prompt
        prompt_label = QLabel("Custom Prompt:")
        prompt_label.setStyleSheet("QLabel { color: #323130; font-size: 11px; }")
        
        self.prompt_text = QTextEdit()
        self.prompt_text.setMaximumHeight(80)
        self.prompt_text.setPlaceholderText("‡πÉ‡∏™‡πà custom prompt ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ default...")
        self.prompt_text.setStyleSheet("""
            QTextEdit {
                border: 1px solid #8a8886;
                border-radius: 3px;
                padding: 4px;
                background-color: #ffffff;
                color: #323130;
                font-size: 10px;
            }
        """)
        self.prompt_text.textChanged.connect(self.on_custom_prompt_changed)
        
        # Reset Prompt Button
        self.reset_prompt_btn = QPushButton("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï")
        self.reset_prompt_btn.clicked.connect(self.reset_custom_prompt)
        self.reset_prompt_btn.setStyleSheet("""
            QPushButton {
                background-color: #f3f2f1;
                color: #323130;
                padding: 4px 8px;
                font-size: 10px;
                border: 1px solid #8a8886;
                border-radius: 3px;
                max-width: 60px;
            }
            QPushButton:hover {
                background-color: #e1dfdd;
            }
        """)
        
        ollama_layout.addWidget(vision_label)
        ollama_layout.addWidget(self.vision_model_combo)
        ollama_layout.addWidget(translation_label)
        ollama_layout.addWidget(self.translation_model_combo)
        ollama_layout.addWidget(prompt_label)
        ollama_layout.addWidget(self.prompt_text)
        ollama_layout.addWidget(self.reset_prompt_btn)
        bottom_layout.addWidget(ollama_group)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° layout 4 column ‡∏•‡∏á‡πÉ‡∏ô main layout
        main_layout.addLayout(bottom_layout)
        
        # ‡πÇ‡∏´‡∏•‡∏î Ollama models ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.load_ollama_models()
        
    def on_selection_changed(self, x, y, width, height):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
        self.current_selection = QRect(x, y, width, height)
        self.position_label.setText(f"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: X={x}, Y={y}, ‡∏Å‡∏ß‡πâ‡∏≤‡∏á={width}, ‡∏™‡∏π‡∏á={height}")
    
    def on_interval_changed(self, value):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
        self.capture_interval = value * 1000  # Convert seconds to milliseconds
        self.interval_value_label.setText(f"{value}s")
        
        # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï timer
        if self.is_capturing:
            self.capture_timer.stop()
            self.capture_timer.start(self.capture_interval)
            print(f"üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô {value} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
    def start_capture(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û real-time"""
        self.is_capturing = True
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        self.capture_timer.start(self.capture_interval)
        
        self.status_label.setText(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û (‡∏ó‡∏∏‡∏Å {self.capture_interval//1000} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
        
    def stop_capture(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û"""
        self.is_capturing = False
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        
        # ‡∏´‡∏¢‡∏∏‡∏î timer
        self.capture_timer.stop()
        
        self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û")
        
    def capture_and_process(self):
        """‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OCR"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OCR worker ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if self.ocr_worker and self.ocr_worker.isRunning():
                print("‚ö†Ô∏è OCR ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏Ç‡πâ‡∏≤‡∏° capture ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ")
                return
                
            self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û...")
            
            # ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            region = (
                self.current_selection.x(),
                self.current_selection.y(),
                self.current_selection.width(),
                self.current_selection.height()
            )
            
            # ‡πÉ‡∏ä‡πâ OCR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            screenshot = self.ocr.capture_screen(region)
            
            if screenshot:
                # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å worker ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                if self.ocr_worker:
                    self.ocr_worker.cancel()
                    
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á worker ‡πÉ‡∏´‡∏°‡πà
                self.ocr_worker = OCRWorker(self.ocr, screenshot)
                self.ocr_worker.finished.connect(self.on_ocr_finished)
                self.ocr_worker.error.connect(self.on_ocr_error)
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OCR ‡πÉ‡∏ô background
                self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...")
                self.ocr_worker.start()
            else:
                self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")
                
        except Exception as e:
            self.translated_text.clear()
            self.translated_text.append(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
    
    @pyqtSlot(str, float)
    def on_ocr_finished(self, text, confidence):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠ OCR ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"""
        try:
            self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            if text.strip():
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if text != self.last_detected_text:
                    # ‡πÅ‡∏õ‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏™‡∏°‡∏≠
                    if self.auto_translate:
                        self.translate_text(text)
                    
                    self.last_detected_text = text
            
            self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            
        except Exception as e:
            self.on_ocr_error(str(e))
    
    @pyqtSlot(str)
    def on_ocr_error(self, error_message):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠ OCR ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        self.translated_text.clear()
        self.translated_text.append(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î OCR: {error_message}")
        self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î OCR")
    
    def translate_text(self, text):
        """‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        try:
            self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•...")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ translator ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not self.translator.is_available():
                self.translated_text.clear()
                self.translated_text.append("‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                return
            
            # ‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            result = self.translator.translate(text, self.target_language)
            
            if result['translated_text']:
                # Auto clean old content when new text arrives
                self.translated_text.clear()
                
                # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•
                self.translated_text.append(f"{result['translated_text']}")
                
                # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                self.translated_text.verticalScrollBar().setValue(
                    self.translated_text.verticalScrollBar().maximum()
                )
                
                self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÅ‡∏õ‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                self.translated_text.clear()
                self.translated_text.append("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ")
                self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÅ‡∏õ‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                
        except Exception as e:
            self.translated_text.clear()
            self.translated_text.append(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•: {str(e)}")
            self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•")
    
    def toggle_selection_visibility(self):
        """‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á selection widget"""
        self.selection_widget.toggle_visibility()
        
    def set_selection_visible(self, visible):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á selection widget"""
        self.selection_widget.set_visible_mode(visible)
    
    def load_ollama_models(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ models ‡∏à‡∏≤‡∏Å Ollama ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI"""
        try:
            # ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°
            self.vision_model_combo.clear()
            self.translation_model_combo.clear()
            
            if ollama_service.is_available():
                # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ models
                vision_models = ollama_service.get_vision_models()
                text_models = ollama_service.get_text_models()
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô combo boxes
                self.vision_model_combo.addItems(vision_models)
                self.translation_model_combo.addItems(text_models)
                
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ current selection
                if self.vision_model in vision_models:
                    self.vision_model_combo.setCurrentText(self.vision_model)
                if self.translation_model in text_models:
                    self.translation_model_combo.setCurrentText(self.translation_model)
                
                print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î Ollama models ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Vision={len(vision_models)}, Text={len(text_models)}")
            else:
                # ‡πÉ‡∏™‡πà default model ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Ollama ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                self.vision_model_combo.addItem(self.vision_model)
                self.translation_model_combo.addItem(self.translation_model)
                print("‚ö†Ô∏è Ollama ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡πÉ‡∏ä‡πâ default models")
                
        except Exception as e:
            print(f"‚ùå Error loading Ollama models: {e}")
            # Fallback ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            self.vision_model_combo.addItem(self.vision_model)
            self.translation_model_combo.addItem(self.translation_model)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ custom prompt
        self.prompt_text.setText(self.custom_prompt)
    
    def on_vision_model_changed(self, model_name):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Vision Model"""
        if model_name and model_name != self.vision_model:
            self.vision_model = model_name
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OCR ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ model ‡πÉ‡∏´‡∏°‡πà
            self.ocr.update_vision_model(model_name)
            print(f"üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Vision Model ‡πÄ‡∏õ‡πá‡∏ô: {model_name}")
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config
            OLLAMA_CONFIG['vision_model'] = model_name
    
    def on_translation_model_changed(self, model_name):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Translation Model"""
        if model_name and model_name != self.translation_model:
            self.translation_model = model_name
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï translator ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ model ‡πÉ‡∏´‡∏°‡πà
            if hasattr(self.translator, 'ollama_translator') and self.translator.ollama_translator:
                self.translator.ollama_translator.update_model(model_name)
            print(f"üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Translation Model ‡πÄ‡∏õ‡πá‡∏ô: {model_name}")
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config
            OLLAMA_CONFIG['translation_model'] = model_name
    
    def on_custom_prompt_changed(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Custom Prompt"""
        new_prompt = self.prompt_text.toPlainText().strip()
        if new_prompt != self.custom_prompt:
            self.custom_prompt = new_prompt
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï translator ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ prompt ‡πÉ‡∏´‡∏°‡πà
            if hasattr(self.translator, 'ollama_translator') and self.translator.ollama_translator:
                self.translator.ollama_translator.update_custom_prompt(new_prompt)
            print(f"üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Custom Prompt: {'‡πÉ‡∏ä‡πâ' if new_prompt else '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ (default)'}")
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config
            OLLAMA_CONFIG['custom_prompt'] = new_prompt
    
    def reset_custom_prompt(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Custom Prompt ‡πÄ‡∏õ‡πá‡∏ô default"""
        self.prompt_text.setText("")
        self.custom_prompt = ""
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï translator
        if hasattr(self.translator, 'ollama_translator') and self.translator.ollama_translator:
            self.translator.ollama_translator.update_custom_prompt("")
        print("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Custom Prompt ‡πÄ‡∏õ‡πá‡∏ô default")
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config
        OLLAMA_CONFIG['custom_prompt'] = ""
        
    def keyPressEvent(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ keyboard shortcuts"""
        if event.key() == Qt.Key_V and event.modifiers() == Qt.ControlModifier:
            # Ctrl+V ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toggle visibility
            self.toggle_selection_visibility()
        else:
            super().keyPressEvent(event)
    
    def closeEvent(self, event):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å"""
        # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏≠ OCR worker
        if self.ocr_worker and self.ocr_worker.isRunning():
            print("üõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å OCR worker...")
            self.ocr_worker.cancel()
        
        self.selection_widget.close()
        event.accept()


def main():
    """Enhanced main function with Windows-inspired black & white design"""
    app = QApplication(sys.argv)
    
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Screen Translator - Windows Theme")
    print("=" * 50)
    print("‚ú® Design Features:")
    print("   ‚Ä¢ Translation box at the top")
    print("   ‚Ä¢ Controls and settings below translation area")
    print("   ‚Ä¢ Windows-inspired black & white theme")
    print("   ‚Ä¢ 60% transparent black selection box")
    print("   ‚Ä¢ Modern Windows UI styling")
    print("")
    print("üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ:")
    print("   ‚Ä¢ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÑ‡∏õ‡∏ö‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå")
    print("   ‚Ä¢ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡∏≤‡∏Å‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢")
    print("   ‚Ä¢ ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á")
    print("=" * 50)
    
    window = Window()
    window.show()
    
    return app.exec_()


if __name__ == "__main__":
    sys.exit(main())
