import sys
import os
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                            QHBoxLayout, QPushButton, QTextEdit, QLabel, 
                            QFrame, QSplitter, QGroupBox, QProgressBar,
                            QCheckBox, QSpinBox, QSlider)
from PyQt5.QtCore import Qt, QTimer, QRect, pyqtSignal, QThread, pyqtSlot, QPoint
from PyQt5.QtGui import QPainter, QPen, QColor, QFont, QCursor
import pyautogui
import cv2
import numpy as np
from PIL import Image

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import modules
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from translation.ocr import OCR
from translation.translator import Translator
from config import UI_CONFIG


class SelectionWidget(QWidget):
    """Enhanced Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß"""
    position_changed = pyqtSignal(int, int, int, int)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
    RESIZE_NONE = 0
    RESIZE_TOP = 1
    RESIZE_BOTTOM = 2
    RESIZE_LEFT = 4
    RESIZE_RIGHT = 8
    RESIZE_TOP_LEFT = RESIZE_TOP | RESIZE_LEFT
    RESIZE_TOP_RIGHT = RESIZE_TOP | RESIZE_RIGHT
    RESIZE_BOTTOM_LEFT = RESIZE_BOTTOM | RESIZE_LEFT
    RESIZE_BOTTOM_RIGHT = RESIZE_BOTTOM | RESIZE_RIGHT
    
    def __init__(self):
        super().__init__()
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô fullscreen window ‡πÅ‡∏ö‡∏ö tool
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Tool)
        self.setAttribute(Qt.WA_TranslucentBackground)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        screen = QApplication.desktop().screenGeometry()
        self.setGeometry(screen)
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
        self.selection_rect = QRect(400, 300, 200, 100)
        self.dragging = False
        self.resizing = False
        self.resize_direction = self.RESIZE_NONE
        self.drag_start_pos = None
        self.initial_rect = None
        self.resize_handle_size = 8
        self.resize_border_width = 6
        
        # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô
        self.visible_mode = True  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        
        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô mouse tracking ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô cursor
        self.setMouseTracking(True)
        
        # ‚ú® Enhanced movement feedback - NEW FEATURES
        self.is_hovering_move_area = False
        self.movement_highlight_alpha = 30
        self.smooth_movement = True
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
        self.show()
        
    def get_interactive_region(self):
        """‡πÑ‡∏î‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ (selection rect + resize handles)"""
        if not self.visible_mode:
            return QRect()  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô
            
        # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏≠‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏° resize handles
        expanded_rect = QRect(self.selection_rect)
        border = self.resize_border_width + self.resize_handle_size
        expanded_rect.adjust(-border, -border, border, border)
        return expanded_rect
        
    def should_handle_mouse_event(self, pos):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ mouse event ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        if not self.visible_mode:
            return False
        interactive_region = self.get_interactive_region()
        return interactive_region.contains(pos)
        
    def paintEvent(self, event):
        """‚ú® Enhanced paint event with improved visual feedback"""
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°
        if not self.visible_mode:
            return
            
        painter = QPainter(self)
        
        # ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏™‡∏µ‡∏î‡∏≥‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ 60%)
        painter.fillRect(self.selection_rect, QColor(0, 0, 0, 153))  # 60% transparency = 255 * 0.6 = 153
        
        # ‚ú® Highlight moveable area when hovering (NEW FEATURE)
        if self.is_hovering_move_area and not self.resizing:
            highlight_rect = QRect(self.selection_rect)
            highlight_rect.adjust(-2, -2, 2, 2)
            painter.fillRect(highlight_rect, QColor(0, 120, 255, self.movement_highlight_alpha))
        
        # ‚ú® Dynamic border color based on state (ENHANCED)
        if self.dragging:
            pen_color = QColor(0, 255, 0, 220)  # Green when dragging
            pen_width = 3
        elif self.is_hovering_move_area:
            pen_color = QColor(0, 120, 255, 200)  # Blue when hovering
            pen_width = 2
        else:
            pen_color = QColor(255, 0, 0, 180)  # Red default
            pen_width = 2
            
        pen = QPen(pen_color, pen_width)
        painter.setPen(pen)
        painter.drawRect(self.selection_rect)

        # ‚ú® Draw move icon (NEW)
        self.draw_move_icon(painter)
        
        # ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î (handles)
        self.draw_resize_handles(painter)
        
        # ‚ú® Enhanced size info with movement status (IMPROVED)
        self.draw_enhanced_size_info(painter)
    
    def draw_move_icon(self, painter):
        """Draws a small cross icon at the top-left of the selection box."""
        rect = self.selection_rect
        icon_size = 10  # Size of the icon lines
        margin = 8      # Margin from the corner, making it slightly more inset

        # Calculate center of the icon
        icon_center_x = rect.left() + margin + icon_size // 2
        icon_center_y = rect.top() + margin + icon_size // 2

        # Icon pen
        icon_pen = QPen(QColor(80, 80, 80, 180), 2) # Dark grey, semi-transparent
        painter.setPen(icon_pen)

        # Draw horizontal line of the cross
        painter.drawLine(icon_center_x - icon_size // 2, icon_center_y,
                         icon_center_x + icon_size // 2, icon_center_y)
        # Draw vertical line of the cross
        painter.drawLine(icon_center_x, icon_center_y - icon_size // 2,
                         icon_center_x, icon_center_y + icon_size // 2)

    def draw_resize_handles(self, painter):
        """‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏à‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î"""
        handle_size = self.resize_handle_size
        rect = self.selection_rect
        
        # ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á handles
        painter.setBrush(QColor(255, 255, 255, 255))
        painter.setPen(QPen(QColor(255, 0, 0, 255), 1))
        
        # ‡∏°‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á 4 ‡∏°‡∏∏‡∏°
        handles = [
            # Corner handles
            QRect(rect.left() - handle_size//2, rect.top() - handle_size//2, handle_size, handle_size),
            QRect(rect.right() - handle_size//2, rect.top() - handle_size//2, handle_size, handle_size),
            QRect(rect.left() - handle_size//2, rect.bottom() - handle_size//2, handle_size, handle_size),
            QRect(rect.right() - handle_size//2, rect.bottom() - handle_size//2, handle_size, handle_size),
            # Edge handles
            QRect(rect.center().x() - handle_size//2, rect.top() - handle_size//2, handle_size, handle_size),
            QRect(rect.center().x() - handle_size//2, rect.bottom() - handle_size//2, handle_size, handle_size),
            QRect(rect.left() - handle_size//2, rect.center().y() - handle_size//2, handle_size, handle_size),
            QRect(rect.right() - handle_size//2, rect.center().y() - handle_size//2, handle_size, handle_size),
        ]
        
        for handle in handles:
            painter.drawRect(handle)
    
    def draw_enhanced_size_info(self, painter):
        """‚ú® Enhanced size info with movement status (NEW FEATURE)"""
        rect = self.selection_rect
        
        # Main size text
        size_text = f"{rect.width()} √ó {rect.height()}"
        
        # ‚ú® Add movement status indicator
        if self.dragging:
            status_text = "üîÑ Moving..."
            status_color = QColor(0, 255, 0, 255)
        elif self.is_hovering_move_area:
            status_text = "üëÜ Click & Drag to Move"
            status_color = QColor(0, 120, 255, 255)
        else:
            status_text = ""
            status_color = QColor(255, 255, 255, 255)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        text_pos = QPoint(rect.left(), rect.top() - 30)
        if text_pos.y() < 40:
            text_pos.setY(rect.bottom() + 40)
        
        # ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        font = QFont("Arial", 10)
        painter.setFont(font)
        
        # Size info
        size_rect = painter.fontMetrics().boundingRect(size_text)
        size_rect.moveTopLeft(text_pos)
        size_rect.adjust(-4, -2, 4, 2)
        
        painter.fillRect(size_rect, QColor(0, 0, 0, 180))
        painter.setPen(QPen(QColor(255, 255, 255, 255)))
        painter.drawText(text_pos, size_text)
        
        # ‚ú® Status info (NEW)
        if status_text:
            status_pos = QPoint(text_pos.x(), text_pos.y() + 20)
            status_rect = painter.fontMetrics().boundingRect(status_text)
            status_rect.moveTopLeft(status_pos)
            status_rect.adjust(-4, -2, 4, 2)
            
            painter.fillRect(status_rect, QColor(0, 0, 0, 160))
            painter.setPen(QPen(status_color))
            painter.drawText(status_pos, status_text)
    
    def mousePressEvent(self, event):
        """‚ú® Enhanced mouse press with better feedback (IMPROVED)"""
        if event.button() == Qt.LeftButton:
            pos = event.pos()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not self.should_handle_mouse_event(pos):
                event.ignore()
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            resize_direction = self.get_resize_direction(pos)
            
            if resize_direction != self.RESIZE_NONE:
                # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
                self.resizing = True
                self.resize_direction = resize_direction
                self.drag_start_pos = pos
                self.initial_rect = QRect(self.selection_rect)
                event.accept()
            else:
                # ‚ú® Enhanced dragging - allow from anywhere in interactive region
                self.dragging = True
                self.drag_start_pos = pos
                self.update()  # Trigger immediate visual feedback
                event.accept()
    
    def mouseMoveEvent(self, event):
        """‚ú® Enhanced mouse move with smooth feedback (IMPROVED)"""
        pos = event.pos()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not self.should_handle_mouse_event(pos) and not (self.dragging or self.resizing):
            event.ignore()
            return
        
        if self.dragging and self.drag_start_pos:
            # ‚ú® Enhanced dragging with smooth movement
            delta = pos - self.drag_start_pos
            new_rect = QRect(self.selection_rect)
            new_rect.translate(delta)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
            screen_rect = self.rect()
            if (new_rect.left() >= 0 and new_rect.top() >= 0 and 
                new_rect.right() <= screen_rect.width() and 
                new_rect.bottom() <= screen_rect.height()):
                self.selection_rect = new_rect
                self.drag_start_pos = pos
                self.update()
                self.emit_position_changed()
                
        elif self.resizing and self.drag_start_pos and self.initial_rect:
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
            self.resize_selection(pos)
            
        else:
            # ‚ú® Enhanced cursor and hover feedback
            self.update_enhanced_cursor(pos)
    
    def update_enhanced_cursor(self, pos):
        """‚ú® Enhanced cursor with hover feedback (NEW FEATURE)"""
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô cursor
        if not self.visible_mode:
            self.setCursor(QCursor(Qt.ArrowCursor))
            self.is_hovering_move_area = False
            return
            
        direction = self.get_resize_direction(pos)
        
        # Track hover state changes for visual feedback
        prev_hovering = self.is_hovering_move_area
        self.is_hovering_move_area = False
        
        if direction == self.RESIZE_TOP or direction == self.RESIZE_BOTTOM:
            self.setCursor(QCursor(Qt.SizeVerCursor))
        elif direction == self.RESIZE_LEFT or direction == self.RESIZE_RIGHT:
            self.setCursor(QCursor(Qt.SizeHorCursor))
        elif direction == self.RESIZE_TOP_LEFT or direction == self.RESIZE_BOTTOM_RIGHT:
            self.setCursor(QCursor(Qt.SizeFDiagCursor))
        elif direction == self.RESIZE_TOP_RIGHT or direction == self.RESIZE_BOTTOM_LEFT:
            self.setCursor(QCursor(Qt.SizeBDiagCursor))
        elif self.selection_rect.contains(pos):
            # ‚ú® Enhanced move cursor with hover state
            self.setCursor(QCursor(Qt.SizeAllCursor))
            self.is_hovering_move_area = True
        else:
            self.setCursor(QCursor(Qt.ArrowCursor))
            
        # ‚ú® Update visual feedback if hover state changed
        if prev_hovering != self.is_hovering_move_area:
            self.update()  # Trigger repaint for highlight effect
    
    def mouseReleaseEvent(self, event):
        """‚ú® Enhanced mouse release with cleanup (IMPROVED)"""
        was_dragging = self.dragging
        
        self.dragging = False
        self.resizing = False
        self.resize_direction = self.RESIZE_NONE
        self.drag_start_pos = None
        self.initial_rect = None
        
        # ‚ú® Update visual feedback when dragging ends
        if was_dragging:
            self.update()
    
    def resize_selection(self, current_pos):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        delta = current_pos - self.drag_start_pos
        new_rect = QRect(self.initial_rect)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
        if self.resize_direction & self.RESIZE_LEFT:
            new_rect.setLeft(new_rect.left() + delta.x())
        if self.resize_direction & self.RESIZE_RIGHT:
            new_rect.setRight(new_rect.right() + delta.x())
        if self.resize_direction & self.RESIZE_TOP:
            new_rect.setTop(new_rect.top() + delta.y())
        if self.resize_direction & self.RESIZE_BOTTOM:
            new_rect.setBottom(new_rect.bottom() + delta.y())
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        min_size = 50
        if new_rect.width() < min_size:
            if self.resize_direction & self.RESIZE_LEFT:
                new_rect.setLeft(new_rect.right() - min_size)
            else:
                new_rect.setRight(new_rect.left() + min_size)
                
        if new_rect.height() < min_size:
            if self.resize_direction & self.RESIZE_TOP:
                new_rect.setTop(new_rect.bottom() - min_size)
            else:
                new_rect.setBottom(new_rect.top() + min_size)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        screen_rect = self.rect()
        new_rect = new_rect.intersected(screen_rect)
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≠‡∏ö
        if new_rect.isValid():
            self.selection_rect = new_rect
            self.update()
            self.emit_position_changed()
    
    def get_resize_direction(self, pos):
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å"""
        rect = self.selection_rect
        handle_size = self.resize_handle_size
        border_width = self.resize_border_width
        
        direction = self.RESIZE_NONE
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤
        if abs(pos.x() - rect.left()) <= border_width:
            direction |= self.RESIZE_LEFT
        elif abs(pos.x() - rect.right()) <= border_width:
            direction |= self.RESIZE_RIGHT
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á
        if abs(pos.y() - rect.top()) <= border_width:
            direction |= self.RESIZE_TOP
        elif abs(pos.y() - rect.bottom()) <= border_width:
            direction |= self.RESIZE_BOTTOM
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö handles ‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°
        corner_handles = [
            (rect.topLeft(), self.RESIZE_TOP_LEFT),
            (rect.topRight(), self.RESIZE_TOP_RIGHT),
            (rect.bottomLeft(), self.RESIZE_BOTTOM_LEFT),
            (rect.bottomRight(), self.RESIZE_BOTTOM_RIGHT),
        ]
        
        for corner, corner_direction in corner_handles:
            corner_rect = QRect(corner.x() - handle_size//2, corner.y() - handle_size//2,
                              handle_size, handle_size)
            if corner_rect.contains(pos):
                return corner_direction
                
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö handles ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö
        edge_handles = [
            (QPoint(rect.center().x(), rect.top()), self.RESIZE_TOP),
            (QPoint(rect.center().x(), rect.bottom()), self.RESIZE_BOTTOM),
            (QPoint(rect.left(), rect.center().y()), self.RESIZE_LEFT),
            (QPoint(rect.right(), rect.center().y()), self.RESIZE_RIGHT),
        ]
        
        for edge_point, edge_direction in edge_handles:
            edge_rect = QRect(edge_point.x() - handle_size//2, edge_point.y() - handle_size//2,
                            handle_size, handle_size)
            if edge_rect.contains(pos):
                return edge_direction
        
        return direction
    
    def emit_position_changed(self):
        """‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
        self.position_changed.emit(
            self.selection_rect.x(),
            self.selection_rect.y(),
            self.selection_rect.width(),
            self.selection_rect.height()
        )
    
    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.hide()
        elif event.key() == Qt.Key_V:  # V key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toggle visibility
            self.toggle_visibility()
    
    def toggle_visibility(self):
        """‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"""
        self.visible_mode = not self.visible_mode
        self.update()  # repaint ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô
        
    def set_visible_mode(self, visible):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
        self.visible_mode = visible
        self.update()
        
    def is_visible_mode(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
        return self.visible_mode


# Use the enhanced SelectionWidget in the main Window class
# (The rest of the Window class remains the same as in the original file)
class Window(QMainWindow):
    def __init__(self, title="Screen Translator"):
        super().__init__()
        self.title = title
        self.setWindowTitle(title)
        self.setGeometry(100, 100, 480, 600)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö layout ‡πÉ‡∏´‡∏°‡πà
        
        # ‚ú® Use the enhanced SelectionWidget
        self.selection_widget = SelectionWidget()
        self.selection_widget.position_changed.connect(self.on_selection_changed)
        
        # Rest of initialization...
        self.current_selection = QRect(100, 100, 300, 200)
        self.is_capturing = False
        self.ocr = OCR(engine='ollama_vision')
        self.translator = Translator(service='ollama')
        self.auto_translate = True
        self.target_language = 'th'
        self.last_detected_text = ""
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û
        self.capture_interval = UI_CONFIG.get('capture_interval', 2000)  # default 2000ms
        
        self.setup_ui()
        
        # Timer setup
        self.capture_timer = QTimer()
        self.capture_timer.timeout.connect(self.capture_and_process)
        
    def setup_ui(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ UI - Windows Black & White Theme"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Windows-inspired styling
        self.setStyleSheet("""
            QMainWindow {
                background-color: #ffffff;
                color: #000000;
            }
            QWidget {
                background-color: #ffffff;
                color: #000000;
                font-family: 'Segoe UI', Arial, sans-serif;
            }
            QGroupBox {
                font-weight: bold;
                font-size: 11px;
                border: 2px solid #cccccc;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: #f8f8f8;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                background-color: #ffffff;
                color: #000000;
            }
        """)
        
        # Layout ‡∏´‡∏•‡∏±‡∏Å
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(8)
        main_layout.setContentsMargins(10, 10, 10, 10)
        
        # 1. ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î
        text_group = QGroupBox("üìÑ ‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•")
        text_layout = QVBoxLayout(text_group)
        
        self.translated_text = QTextEdit()
        self.translated_text.setFont(QFont("Segoe UI", 12))
        self.translated_text.setPlaceholderText("‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...")
        self.translated_text.setStyleSheet("""
            QTextEdit { 
                border: 2px solid #cccccc; 
                border-radius: 4px; 
                padding: 8px; 
                background-color: #ffffff;
                color: #000000;
                selection-background-color: #0078d4;
                selection-color: #ffffff;
            }
            QTextEdit:focus {
                border: 2px solid #0078d4;
            }
        """)
        text_layout.addWidget(self.translated_text)
        main_layout.addWidget(text_group, 1)  # ‡πÉ‡∏´‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        
        # 2. ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 3 column
        bottom_layout = QHBoxLayout()
        bottom_layout.setSpacing(8)
        
        # Column 1: ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        control_group = QGroupBox("üéÆ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°")
        control_layout = QVBoxLayout(control_group)
        
        self.start_button = QPushButton("‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°")
        self.start_button.clicked.connect(self.start_capture)
        self.start_button.setStyleSheet("""
            QPushButton { 
                background-color: #0078d4; 
                color: white; 
                padding: 8px 16px; 
                font-size: 11px;
                font-weight: bold; 
                border: 1px solid #005a9e;
                border-radius: 3px;
                min-width: 80px;
            }
            QPushButton:hover { 
                background-color: #106ebe; 
                border: 1px solid #005a9e;
            }
            QPushButton:pressed {
                background-color: #005a9e;
            }
            QPushButton:disabled {
                background-color: #f3f2f1;
                color: #a19f9d;
                border: 1px solid #d2d0ce;
            }
        """)
        
        self.stop_button = QPushButton("‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î")
        self.stop_button.clicked.connect(self.stop_capture)
        self.stop_button.setEnabled(False)
        self.stop_button.setStyleSheet("""
            QPushButton { 
                background-color: #d83b01; 
                color: white; 
                padding: 8px 16px; 
                font-size: 11px;
                font-weight: bold; 
                border: 1px solid #a4262c;
                border-radius: 3px;
                min-width: 80px;
            }
            QPushButton:hover { 
                background-color: #f2583e; 
                border: 1px solid #a4262c;
            }
            QPushButton:pressed {
                background-color: #a4262c;
            }
            QPushButton:disabled {
                background-color: #f3f2f1;
                color: #a19f9d;
                border: 1px solid #d2d0ce;
            }
        """)
        
        # ‡∏õ‡∏∏‡πà‡∏° toggle visibility
        self.toggle_button = QPushButton("üëÅÔ∏è ‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á")
        self.toggle_button.clicked.connect(self.toggle_selection_visibility)
        self.toggle_button.setToolTip("‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (Ctrl+V)")
        self.toggle_button.setStyleSheet("""
            QPushButton { 
                background-color: #ffffff; 
                color: #323130; 
                padding: 8px 16px; 
                font-size: 11px;
                font-weight: normal; 
                border: 1px solid #8a8886;
                border-radius: 3px;
                min-width: 100px;
            }
            QPushButton:hover { 
                background-color: #f3f2f1; 
                border: 1px solid #323130;
            }
            QPushButton:pressed {
                background-color: #edebe9;
            }
        """)
        
        control_layout.addWidget(self.start_button)
        control_layout.addWidget(self.stop_button)
        control_layout.addWidget(self.toggle_button)
        bottom_layout.addWidget(control_group)
        
        # Column 2: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
        interval_group = QGroupBox("‚è±Ô∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤")
        interval_layout = QVBoxLayout(interval_group)
        
        interval_label = QLabel("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ):")
        interval_label.setStyleSheet("QLabel { color: #323130; font-size: 11px; }")
        
        self.interval_slider = QSlider(Qt.Horizontal)
        self.interval_slider.setMinimum(UI_CONFIG.get('capture_interval_min', 500) // 1000)  
        self.interval_slider.setMaximum(UI_CONFIG.get('capture_interval_max', 10000) // 1000)  
        self.interval_slider.setValue(self.capture_interval // 1000)  
        self.interval_slider.valueChanged.connect(self.on_interval_changed)
        self.interval_slider.setStyleSheet("""
            QSlider::groove:horizontal {
                border: 1px solid #d2d0ce;
                height: 6px;
                background: #f3f2f1;
                border-radius: 3px;
            }
            QSlider::handle:horizontal {
                background: #0078d4;
                border: 1px solid #005a9e;
                width: 18px;
                margin: -7px 0;
                border-radius: 9px;
            }
            QSlider::handle:horizontal:hover {
                background: #106ebe;
            }
        """)
        
        self.interval_value_label = QLabel(f"{self.capture_interval // 1000}s")
        self.interval_value_label.setMinimumWidth(40)
        self.interval_value_label.setStyleSheet("QLabel { font-weight: bold; color: #0078d4; font-size: 11px; }")
        
        interval_layout.addWidget(interval_label)
        interval_layout.addWidget(self.interval_slider)
        interval_layout.addWidget(self.interval_value_label)
        bottom_layout.addWidget(interval_group)
        
        # Column 3: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status_group = QGroupBox("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
        status_layout = QVBoxLayout(status_group)
        
        self.position_label = QLabel("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: X=100, Y=100, ‡∏Å‡∏ß‡πâ‡∏≤‡∏á=300, ‡∏™‡∏π‡∏á=200")
        self.position_label.setStyleSheet("QLabel { font-size: 10px; color: #605e5c; }")
        
        self.status_label = QLabel("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        self.status_label.setStyleSheet("QLabel { color: #107c10; font-size: 10px; font-weight: bold; }")
        
        # Help text
        self.help_label = QLabel("üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ: ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢ | ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå")
        self.help_label.setStyleSheet("QLabel { font-size: 9px; color: #8a8886; font-style: italic; }")
        self.help_label.setWordWrap(True)
        
        status_layout.addWidget(self.position_label)
        status_layout.addWidget(self.status_label)
        status_layout.addWidget(self.help_label)
        bottom_layout.addWidget(status_group)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° layout 3 column ‡∏•‡∏á‡πÉ‡∏ô main layout
        main_layout.addLayout(bottom_layout)
        
    def on_selection_changed(self, x, y, width, height):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
        self.current_selection = QRect(x, y, width, height)
        self.position_label.setText(f"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: X={x}, Y={y}, ‡∏Å‡∏ß‡πâ‡∏≤‡∏á={width}, ‡∏™‡∏π‡∏á={height}")
    
    def on_interval_changed(self, value):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
        self.capture_interval = value * 1000  # Convert seconds to milliseconds
        self.interval_value_label.setText(f"{value}s")
        
        # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï timer
        if self.is_capturing:
            self.capture_timer.stop()
            self.capture_timer.start(self.capture_interval)
            print(f"üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô {value} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
    def start_capture(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û real-time"""
        self.is_capturing = True
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        self.capture_timer.start(self.capture_interval)
        
        self.status_label.setText(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û (‡∏ó‡∏∏‡∏Å {self.capture_interval//1000} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
        
    def stop_capture(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û"""
        self.is_capturing = False
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        
        # ‡∏´‡∏¢‡∏∏‡∏î timer
        self.capture_timer.stop()
        
        self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û")
        
    def capture_and_process(self):
        """‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OCR"""
        try:
            self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û...")
            
            # ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            region = (
                self.current_selection.x(),
                self.current_selection.y(),
                self.current_selection.width(),
                self.current_selection.height()
            )
            
            # ‡πÉ‡∏ä‡πâ OCR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            screenshot = self.ocr.capture_screen(region)
            
            if screenshot:
                # ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
                text, confidence = self.ocr.get_text_with_confidence(screenshot)
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                if text.strip():
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if text != self.last_detected_text:
                        # ‡πÅ‡∏õ‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏™‡∏°‡∏≠
                        if self.auto_translate:
                            self.translate_text(text)
                        
                        self.last_detected_text = text
                
                self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            else:
                self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")
                
        except Exception as e:
            self.translated_text.clear()
            self.translated_text.append(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
    
    def translate_text(self, text):
        """‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        try:
            self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•...")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ translator ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not self.translator.is_available():
                self.translated_text.clear()
                self.translated_text.append("‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                return
            
            # ‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            result = self.translator.translate(text, self.target_language)
            
            if result['translated_text']:
                # Auto clean old content when new text arrives
                self.translated_text.clear()
                
                # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•
                self.translated_text.append(f"{result['translated_text']}")
                
                # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                self.translated_text.verticalScrollBar().setValue(
                    self.translated_text.verticalScrollBar().maximum()
                )
                
                self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÅ‡∏õ‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                self.translated_text.clear()
                self.translated_text.append("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ")
                self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÅ‡∏õ‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                
        except Exception as e:
            self.translated_text.clear()
            self.translated_text.append(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•: {str(e)}")
            self.status_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•")
    
    def toggle_selection_visibility(self):
        """‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á selection widget"""
        self.selection_widget.toggle_visibility()
        
    def set_selection_visible(self, visible):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á selection widget"""
        self.selection_widget.set_visible_mode(visible)
        
    def keyPressEvent(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ keyboard shortcuts"""
        if event.key() == Qt.Key_V and event.modifiers() == Qt.ControlModifier:
            # Ctrl+V ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toggle visibility
            self.toggle_selection_visibility()
        else:
            super().keyPressEvent(event)
    
    def closeEvent(self, event):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å"""
        self.selection_widget.close()
        event.accept()


def main():
    """Enhanced main function with Windows-inspired black & white design"""
    app = QApplication(sys.argv)
    
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Screen Translator - Windows Theme")
    print("=" * 50)
    print("‚ú® Design Features:")
    print("   ‚Ä¢ Translation box at the top")
    print("   ‚Ä¢ Controls and settings below translation area")
    print("   ‚Ä¢ Windows-inspired black & white theme")
    print("   ‚Ä¢ 60% transparent black selection box")
    print("   ‚Ä¢ Modern Windows UI styling")
    print("")
    print("üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ:")
    print("   ‚Ä¢ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÑ‡∏õ‡∏ö‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå")
    print("   ‚Ä¢ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡∏≤‡∏Å‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢")
    print("   ‚Ä¢ ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á")
    print("=" * 50)
    
    window = Window()
    window.show()
    
    return app.exec_()


if __name__ == "__main__":
    sys.exit(main())
