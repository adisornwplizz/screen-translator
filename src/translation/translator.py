import os
import sys
from deep_translator import GoogleTranslator
import requests
import time

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import config
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from config import TRANSLATION_CONFIG

# Import OllamaTranslator
try:
    from .ollama_translator import OllamaTranslator
    print("‚úÖ Successfully imported OllamaTranslator from ollama_translator.py")
except ImportError as e:
    print(f"‚ùå Failed to import OllamaTranslator: {e}")
    # Fallback placeholder
    class OllamaTranslator:
        def __init__(self, *args, **kwargs):
            self.is_connected = False
            print("‚ö†Ô∏è OllamaTranslator fallback placeholder")
        
        def translate(self, text, *args, **kwargs):
            return {
                'translated_text': text,
                'detected_language': 'error',
                'confidence': 0.0,
                'service': 'ollama',
                'error': 'Import issue - using placeholder'
            }
        
        def is_available(self):
            return False


class Translator:
    def __init__(self, service='ollama', ollama_model='gemma3:4b', custom_prompt=''):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Translator
        
        Args:
            service (str): ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ ('google', 'ollama')
            ollama_model (str): Model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ollama
            custom_prompt (str): Custom prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ollama
        """
        self.service = service
        self.google_translator = None
        self.ollama_translator = None
        self.api_key = None
        self.ollama_model = ollama_model
        self.custom_prompt = custom_prompt
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô service ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if service == 'ollama':
            try:
                self.ollama_translator = OllamaTranslator(model=ollama_model, custom_prompt=custom_prompt)
                if self.ollama_translator.is_available():
                    print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Ollama ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Ollama ‡πÑ‡∏î‡πâ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Google Translate")
                    self.service = 'google'
                    self._init_google_translator()
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Ollama: {e}")
                print("üîÑ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Google Translate")
                self.service = 'google'
                self._init_google_translator()
        
        elif service == 'google':
            self._init_google_translator()
        
        # ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        if self.service == 'ollama':
            self.supported_languages = {
                'auto': '‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
                'en': '‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©',
                'th': '‡πÑ‡∏ó‡∏¢'
            }
        else:
            self.supported_languages = {
                'auto': '‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
                'th': '‡πÑ‡∏ó‡∏¢',
                'en': '‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©',
                'ja': '‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô',
                'ko': '‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ',
                'zh': '‡∏à‡∏µ‡∏ô',
                'zh-tw': '‡∏à‡∏µ‡∏ô‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°',
                'fr': '‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™',
                'de': '‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô',
                'es': '‡∏™‡πÄ‡∏õ‡∏ô',
                'it': '‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ',
                'ru': '‡∏£‡∏±‡∏™‡πÄ‡∏ã‡∏µ‡∏¢',
                'ar': '‡∏≠‡∏≤‡∏´‡∏£‡∏±‡∏ö',
                'hi': '‡∏Æ‡∏¥‡∏ô‡∏î‡∏µ',
                'pt': '‡πÇ‡∏õ‡∏£‡∏ï‡∏∏‡πÄ‡∏Å‡∏™',
                'vi': '‡πÄ‡∏ß‡∏µ‡∏¢‡∏î‡∏ô‡∏≤‡∏°',
                'id': '‡∏≠‡∏¥‡∏ô‡πÇ‡∏î‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢',
                'ms': '‡∏°‡∏≤‡πÄ‡∏•‡∏¢‡πå',
                'tl': '‡∏ï‡∏≤‡∏Å‡∏≤‡∏•‡πá‡∏≠‡∏Å'
            }
    
    def _init_google_translator(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Google Translator"""
        try:
            self.google_translator = GoogleTranslator(source='auto', target='th')
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Translate ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Translate: {e}")

    def translate(self, text, target_language='th', source_language='auto'):
        """‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        
        Args:
            text (str): ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏õ‡∏•
            target_language (str): ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            source_language (str): ‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            
        Returns:
            dict: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏• {'translated_text': str, 'detected_language': str, 'confidence': float}
        """
        if not text or not text.strip():
            return {
                'translated_text': '',
                'detected_language': 'unknown',
                'confidence': 0.0
            }
        
        try:
            if self.service == 'ollama' and self.ollama_translator:
                return self.ollama_translator.translate(text, target_language, source_language)
            elif self.service == 'google' and self.google_translator:
                return self._translate_google(text, target_language, source_language)
            else:
                return {
                    'translated_text': text,
                    'detected_language': 'unknown',
                    'confidence': 0.0
                }
                
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•: {e}")
            return {
                'translated_text': text,
                'detected_language': 'error',
                'confidence': 0.0
            }

    def _translate_google(self, text, target_language, source_language):
        """‡πÅ‡∏õ‡∏•‡∏î‡πâ‡∏ß‡∏¢ Google Translate
        
        Args:
            text (str): ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏õ‡∏•
            target_language (str): ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            source_language (str): ‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            
        Returns:
            dict: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•
        """
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ deep-translator
            if source_language == 'auto':
                from deep_translator import single_detection
                detected_lang = single_detection(text, api_key=None)
                confidence = 0.9  # default confidence
            else:
                detected_lang = source_language
                confidence = 1.0
            
            # ‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            if detected_lang == target_language:
                # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                translated_text = text
            else:
                translator = GoogleTranslator(source=detected_lang, target=target_language)
                translated_text = translator.translate(text)
            
            return {
                'translated_text': translated_text,
                'detected_language': detected_lang,
                'confidence': confidence
            }
            
        except Exception as e:
            print(f"‚ùå Google Translate error: {e}")
            raise e

    def get_supported_languages(self):
        """‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        
        Returns:
            dict: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        """
        return self.supported_languages

    def detect_language(self, text):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        
        Args:
            text (str): ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            
        Returns:
            dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤ {'language': str, 'confidence': float, 'language_name': str}
        """
        try:
            if self.service == 'ollama' and self.ollama_translator:
                # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ollama
                import re
                thai_pattern = re.compile(r'[\u0E00-\u0E7F]')
                english_pattern = re.compile(r'[a-zA-Z]')
                
                if thai_pattern.search(text):
                    detected_lang = 'th'
                elif english_pattern.search(text):
                    detected_lang = 'en'
                else:
                    detected_lang = 'unknown'
                
                language_name = self.supported_languages.get(detected_lang, detected_lang)
                
                return {
                    'language': detected_lang,
                    'confidence': 0.9,
                    'language_name': language_name
                }
                
            elif self.service == 'google' and self.google_translator:
                from deep_translator import single_detection
                detected_lang = single_detection(text, api_key=None)
                language_name = self.supported_languages.get(detected_lang, detected_lang)
                
                return {
                    'language': detected_lang,
                    'confidence': 0.9,  # default confidence for deep-translator
                    'language_name': language_name
                }
            else:
                return {
                    'language': 'unknown',
                    'confidence': 0.0,
                    'language_name': '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'
                }
                
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤: {e}")
            return {
                'language': 'error',
                'confidence': 0.0,
                'language_name': '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'
            }

    def batch_translate(self, texts, target_language='th', source_language='auto'):
        """‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        
        Args:
            texts (list): ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏õ‡∏•
            target_language (str): ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            source_language (str): ‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            
        Returns:
            list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•
        """
        results = []
        
        for text in texts:
            try:
                result = self.translate(text, target_language, source_language)
                results.append(result)
                
                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô rate limit
                time.sleep(0.1)
                
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {text[:50]}... - {e}")
                results.append({
                    'translated_text': text,
                    'detected_language': 'error',
                    'confidence': 0.0
                })
        
        return results

    def test_translation(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á translator"""
        test_texts = [
            "Hello World!",
            "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö",
            "„Åì„Çì„Å´„Å°„ÅØ",
            "ÏïàÎÖïÌïòÏÑ∏Ïöî",
            "‰Ω†Â•Ω"
        ]
        
        print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•:")
        
        for text in test_texts:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤
                detection = self.detect_language(text)
                print(f"üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {text}")
                print(f"üîç ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: {detection['language_name']} ({detection['confidence']:.2f})")
                
                # ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                translation = self.translate(text, 'th')
                print(f"üîÑ ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢: {translation['translated_text']}")
                print("‚îÄ" * 40)
                
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    def is_available(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ translator ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        
        Returns:
            bool: True ‡∏´‡∏≤‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        """
        if self.service == 'ollama':
            return self.ollama_translator is not None and self.ollama_translator.is_available()
        elif self.service == 'google':
            return self.google_translator is not None
        return False
    
    def get_service_info(self):
        """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö service ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà"""
        if self.service == 'ollama' and self.ollama_translator:
            return self.ollama_translator.get_model_info()
        elif self.service == 'google':
            return {
                'service': 'google',
                'model': 'Google Translate API',
                'available': self.is_available(),
                'supported_languages': self.supported_languages
            }
        else:
            return {
                'service': 'none',
                'model': 'No translator available',
                'available': False,
                'supported_languages': {}
            }
    
    def switch_service(self, new_service):
        """‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô translation service
        
        Args:
            new_service (str): Service ‡πÉ‡∏´‡∏°‡πà ('ollama', 'google')
        """
        if new_service == self.service:
            print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ {new_service} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return
        
        print(f"üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å {self.service} ‡πÄ‡∏õ‡πá‡∏ô {new_service}")
        
        old_service = self.service
        self.service = new_service
        
        if new_service == 'ollama':
            try:
                if not self.ollama_translator:
                    self.ollama_translator = OllamaTranslator()
                
                if self.ollama_translator.is_available():
                    print("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Ollama ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    self._update_supported_languages()
                else:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ Ollama ‡πÑ‡∏î‡πâ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ service ‡πÄ‡∏î‡∏¥‡∏°")
                    self.service = old_service
            except Exception as e:
                print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Ollama: {e}")
                self.service = old_service
                
        elif new_service == 'google':
            try:
                if not self.google_translator:
                    self._init_google_translator()
                
                if self.google_translator:
                    print("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Google Translate ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    self._update_supported_languages()
                else:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ Google Translate ‡πÑ‡∏î‡πâ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ service ‡πÄ‡∏î‡∏¥‡∏°")
                    self.service = old_service
            except Exception as e:
                print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Google Translate: {e}")
                self.service = old_service
    
    def _update_supported_languages(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° service ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        if self.service == 'ollama':
            self.supported_languages = {
                'auto': '‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
                'en': '‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©',
                'th': '‡πÑ‡∏ó‡∏¢'
            }
        else:
            self.supported_languages = {
                'auto': '‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
                'th': '‡πÑ‡∏ó‡∏¢',
                'en': '‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©',
                'ja': '‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô',
                'ko': '‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ',
                'zh': '‡∏à‡∏µ‡∏ô',
                'zh-tw': '‡∏à‡∏µ‡∏ô‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°',
                'fr': '‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™',
                'de': '‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô',
                'es': '‡∏™‡πÄ‡∏õ‡∏ô',
                'it': '‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ',
                'ru': '‡∏£‡∏±‡∏™‡πÄ‡∏ã‡∏µ‡∏¢',
                'ar': '‡∏≠‡∏≤‡∏´‡∏£‡∏±‡∏ö',
                'hi': '‡∏Æ‡∏¥‡∏ô‡∏î‡∏µ',
                'pt': '‡πÇ‡∏õ‡∏£‡∏ï‡∏∏‡πÄ‡∏Å‡∏™',
                'vi': '‡πÄ‡∏ß‡∏µ‡∏¢‡∏î‡∏ô‡∏≤‡∏°',
                'id': '‡∏≠‡∏¥‡∏ô‡πÇ‡∏î‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢',
                'ms': '‡∏°‡∏≤‡πÄ‡∏•‡∏¢‡πå',
                'tl': '‡∏ï‡∏≤‡∏Å‡∏≤‡∏•‡πá‡∏≠‡∏Å'
            }