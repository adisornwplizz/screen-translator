"""
Ollama Translator Module for Screen Translator
‡πÉ‡∏ä‡πâ Ollama API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Gemma 3:4b model
"""

import requests
import json
import time
import re
from typing import Dict, List, Optional
import hashlib


class OllamaTranslator:
    """Translator ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Ollama API ‡∏Å‡∏±‡∏ö Gemma3:4b model"""
    
    def __init__(self, host: str = "localhost", port: int = 11434, model: str = "gemma3:4b"):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Ollama Translator
        
        Args:
            host (str): Ollama server host
            port (int): Ollama server port
            model (str): Model name ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
        """
        self.host = host
        self.port = port
        self.model = model
        self.base_url = f"http://{host}:{port}"
        self.api_url = f"{self.base_url}/api/generate"
        self.session = requests.Session()
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î timeout
        self.timeout = 30
        
        # Translation cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
        self.translation_cache = {}
        self.cache_max_size = 100
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        self.is_connected = self._test_connection()
        
        if self.is_connected:
            print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Ollama ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Model: {self.model}")
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Ollama ‡πÑ‡∏î‡πâ - {self.base_url}")

    def _test_connection(self) -> bool:
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Ollama"""
        try:
            response = self.session.get(f"{self.base_url}/api/tags", timeout=5)
            if response.status_code == 200:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ model ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                models = response.json().get('models', [])
                model_names = [model.get('name', '') for model in models]
                if any(self.model in name for name in model_names):
                    return True
                else:
                    print(f"‚ö†Ô∏è Model {self.model} ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
                    print(f"üìã Models ‡∏ó‡∏µ‡πà‡∏°‡∏µ: {', '.join(model_names)}")
                    return False
            return False
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")
            return False

    def _get_cache_key(self, text: str, target_language: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cache"""
        content = f"{text.strip().lower()}_{target_language}"
        return hashlib.md5(content.encode('utf-8')).hexdigest()
    
    def _get_from_cache(self, text: str, target_language: str) -> Optional[Dict]:
        """‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å cache"""
        cache_key = self._get_cache_key(text, target_language)
        if cache_key in self.translation_cache:
            cached_result = self.translation_cache[cache_key].copy()
            cached_result['from_cache'] = True
            print(f"üìã ‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {text[:50]}...")
            return cached_result
        return None
    
    def _save_to_cache(self, text: str, target_language: str, result: Dict):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á cache"""
        if len(self.translation_cache) >= self.cache_max_size:
            # ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å‡∏≠‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ cache ‡πÄ‡∏ï‡πá‡∏°
            oldest_key = next(iter(self.translation_cache))
            del self.translation_cache[oldest_key]
        
        cache_key = self._get_cache_key(text, target_language)
        # ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error results
        if 'error' not in result:
            self.translation_cache[cache_key] = result.copy()

    def _detect_language(self, text: str) -> str:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡πÑ‡∏ó‡∏¢
        thai_pattern = re.compile(r'[\u0E00-\u0E7F]')
        if thai_pattern.search(text):
            return 'th'
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        english_pattern = re.compile(r'[a-zA-Z]')
        if english_pattern.search(text):
            return 'en'
        
        return 'unknown'

    def _create_prompt(self, text: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ollama - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"""
        prompt = f"""
For the following English text, please go through each sentence and paragraph to enhance its readability and naturalness, making it sound like it was originally written by a native English speaker. Pay attention to sentence structure, vocabulary, and common expressions. Once the English version is optimized, please provide a comprehensive and accurate Thai translation.

English text:
{text}

Respond ONLY with the final Thai translation sentence. Do not include any English, explanations, or extra formatting.
"""
        return prompt

    def translate(self, text: str, target_language: str = 'th', source_language: str = 'auto') -> Dict:
        """
        ‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏° cache
        
        Args:
            text (str): ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏õ‡∏•
            target_language (str): ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 'th')
            source_language (str): ‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            
        Returns:
            dict: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•
        """
        if not text or not text.strip():
            return {
                'translated_text': '',
                'detected_language': 'unknown',
                'confidence': 0.0,
                'service': 'ollama'
            }
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
        cached_result = self._get_from_cache(text, target_language)
        if cached_result:
            return cached_result
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        if not self.is_connected:
            return {
                'translated_text': text,
                'detected_language': 'error',
                'confidence': 0.0,
                'service': 'ollama',
                'error': 'Ollama not connected'
            }
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if target_language != 'th':
            return {
                'translated_text': text,
                'detected_language': 'unsupported',
                'confidence': 0.0,
                'service': 'ollama',
                'error': f'Target language {target_language} not supported'
            }
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        detected_lang = self._detect_language(text)
        
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•
        if detected_lang == 'th':
            result = {
                'translated_text': text,
                'detected_language': 'th',
                'confidence': 1.0,
                'service': 'ollama'
            }
            self._save_to_cache(text, target_language, result)
            return result
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•
        if detected_lang != 'en':
            return {
                'translated_text': text,
                'detected_language': detected_lang,
                'confidence': 0.0,
                'service': 'ollama',
                'error': 'Only English to Thai translation supported'
            }
        
        try:
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° prompt
            prompt = self._create_prompt(text)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Ollama API
            payload = {
                "model": self.model,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.3,  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
                    "top_p": 0.9,
                    "max_tokens": 1000
                }
            }
            
            print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏î‡πâ‡∏ß‡∏¢ Ollama ({self.model})...")
            
            response = self.session.post(
                self.api_url,
                json=payload,
                timeout=self.timeout,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                result_data = response.json()
                translated_text = result_data.get('response', '').strip()
                
                # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                translated_text = self._clean_translation(translated_text)
                
                result = {
                    'translated_text': translated_text,
                    'detected_language': 'en',
                    'confidence': 0.9,
                    'service': 'ollama',
                    'model': self.model
                }
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
                self._save_to_cache(text, target_language, result)
                
                return result
            else:
                error_msg = f"HTTP {response.status_code}: {response.text}"
                print(f"‚ùå Ollama API error: {error_msg}")
                return {
                    'translated_text': text,
                    'detected_language': 'error',
                    'confidence': 0.0,
                    'service': 'ollama',
                    'error': error_msg
                }
        
        except requests.exceptions.Timeout:
            print("‚è∞ Ollama API timeout")
            return {
                'translated_text': text,
                'detected_language': 'error',
                'confidence': 0.0,
                'service': 'ollama',
                'error': 'Request timeout'
            }
        except Exception as e:
            print(f"‚ùå Ollama translation error: {e}")
            return {
                'translated_text': text,
                'detected_language': 'error',
                'confidence': 0.0,
                'service': 'ollama',
                'error': str(e)
            }

    def _clean_translation(self, text: str) -> str:
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•"""
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà model ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        unwanted_phrases = [
            "Thai translation:",
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢:",
            "‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢:",
            "‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•:",
            "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:",
        ]
        
        for phrase in unwanted_phrases:
            text = text.replace(phrase, "").strip()
        
        # ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ quotes ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        text = text.strip('"\'')
        
        return text.strip()

    def batch_translate(self, texts: List[str], target_language: str = 'th') -> List[Dict]:
        """
        ‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        
        Args:
            texts (list): ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏õ‡∏•
            target_language (str): ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            
        Returns:
            list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•
        """
        results = []
        
        for i, text in enumerate(texts):
            print(f"üîÑ ‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° {i+1}/{len(texts)}")
            result = self.translate(text, target_language)
            results.append(result)
            
            # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Ollama ‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î
            if i < len(texts) - 1:
                time.sleep(0.5)
        
        return results

    def test_translation(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏î‡πâ‡∏ß‡∏¢ Ollama"""
        test_texts = [
            "Hello World!",
            "How are you today?",
            "This is a screen translator application.",
            "Please select the area you want to translate.",
            "The weather is nice today.",
            "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö",  # ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            "„Åì„Çì„Å´„Å°„ÅØ",     # ‡∏†‡∏≤‡∏©‡∏≤‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö)
        ]
        
        print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏î‡πâ‡∏ß‡∏¢ Ollama:")
        print("=" * 60)
        
        for text in test_texts:
            print(f"üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: {text}")
            
            result = self.translate(text)
            
            print(f"üîç ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: {result['detected_language']}")
            print(f"üîÑ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {result['translated_text']}")
            print(f"‚ö° Service: {result['service']}")
            
            if 'error' in result:
                print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {result['error']}")
            
            print("‚îÄ" * 60)

    def is_available(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ollama ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.is_connected
    
    def get_model_info(self) -> Dict:
        """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"""
        return {
            'service': 'ollama',
            'model': self.model,
            'host': self.host,
            'port': self.port,
            'available': self.is_available(),
            'supported_languages': {
                'source': ['en'],
                'target': ['th']
            }
        }


if __name__ == "__main__":
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Ollama Translator
    translator = OllamaTranslator(model="gemma3:4b")
    
    if translator.is_available():
        translator.test_translation()
    else:
        print("‚ùå Ollama ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        print("   1. Ollama ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        print("   2. Ollama ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô port 11434")
        print("   3. Model gemma3:4b ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å pull ‡πÅ‡∏•‡πâ‡∏ß")
        print("   4. ‡∏™‡∏±‡πà‡∏á‡∏£‡∏±‡∏ô: ollama pull gemma3:4b")
