"""
Ollama Service Module for managing Ollama models and API interactions
‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ models ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Ollama
"""

import requests
import json
from typing import Dict, List, Optional


class OllamaService:
    """Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Ollama API ‡πÅ‡∏•‡∏∞ models"""
    
    def __init__(self, host: str = "localhost", port: int = 11434):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Ollama Service
        
        Args:
            host (str): Ollama server host
            port (int): Ollama server port
        """
        self.host = host
        self.port = port
        self.base_url = f"http://{host}:{port}"
        self.tags_url = f"{self.base_url}/api/tags"
        self.session = requests.Session()
        self.timeout = 10
        
    def is_available(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ollama ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            response = self.session.get(self.tags_url, timeout=self.timeout)
            return response.status_code == 200
        except Exception:
            return False
    
    def get_available_models(self) -> List[Dict]:
        """
        ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ models ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Ollama
        
        Returns:
            List[Dict]: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ models ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        """
        try:
            response = self.session.get(self.tags_url, timeout=self.timeout)
            if response.status_code == 200:
                data = response.json()
                models = data.get('models', [])
                return models
            else:
                print(f"‚ùå Error fetching models: {response.status_code}")
                return []
        except Exception as e:
            print(f"‚ùå Error connecting to Ollama: {e}")
            return []
    
    def get_model_names(self) -> List[str]:
        """
        ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ models ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠
        
        Returns:
            List[str]: ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ models
        """
        models = self.get_available_models()
        return [model.get('name', '') for model in models if model.get('name')]
    
    def get_vision_models(self) -> List[str]:
        """
        ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ models ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ (‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ vision)
        
        Returns:
            List[str]: ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ models ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        """
        return self.get_model_names() # Return all model names
    
    def get_text_models(self) -> List[str]:
        """
        ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ models ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö text generation/translation
        
        Returns:
            List[str]: ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ text models
        """
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ return ‡∏ó‡∏∏‡∏Å model ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡∏•‡πÑ‡∏î‡πâ
        return self.get_model_names()
    
    def get_default_models(self) -> Dict[str, str]:
        """
        ‡πÑ‡∏î‡πâ default models ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö vision ‡πÅ‡∏•‡∏∞ translation
        
        Returns:
            Dict[str, str]: {'vision': model_name, 'translation': model_name}
        """
        vision_models = self.get_vision_models()
        text_models = self.get_text_models()
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å default models
        default_vision = "gemma3:4b"  # current default
        default_translation = "gemma3:4b"  # current default
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ models ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        if vision_models:
            for preferred in ["gemma3:4b", "llava", "gemma"]:
                for model in vision_models:
                    if preferred in model.lower():
                        default_vision = model
                        break
                if default_vision != "gemma3:4b":
                    break
            if default_vision == "gemma3:4b" and "gemma3:4b" not in vision_models:
                default_vision = vision_models[0]
        
        if text_models:
            for preferred in ["gemma3:4b", "gemma", "llama"]:
                for model in text_models:
                    if preferred in model.lower():
                        default_translation = model
                        break
                if default_translation != "gemma3:4b":
                    break
            if default_translation == "gemma3:4b" and "gemma3:4b" not in text_models:
                default_translation = text_models[0]
        
        return {
            'vision': default_vision,
            'translation': default_translation
        }


# Singleton instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
ollama_service = OllamaService()


if __name__ == "__main__":
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Ollama Service
    service = OllamaService()
    
    print("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Ollama Service")
    print(f"üì° ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {'‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ' if service.is_available() else '‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ'}")
    
    if service.is_available():
        models = service.get_available_models()
        print(f"üì¶ ‡∏û‡∏ö {len(models)} models:")
        for model in models:
            print(f"   - {model.get('name', 'Unknown')}")
        
        print(f"\nüëÅÔ∏è Vision models: {service.get_vision_models()}")
        print(f"üí¨ Text models: {service.get_text_models()}")
        print(f"‚öôÔ∏è Default models: {service.get_default_models()}")
    else:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        print("   1. Ollama ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        print("   2. Ollama ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô port 11434")
        print("   3. ‡∏™‡∏±‡πà‡∏á‡∏£‡∏±‡∏ô: ollama serve")