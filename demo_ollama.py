#!/usr/bin/env python3
"""
Demo script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Screen Translator ‡∏û‡∏£‡πâ‡∏≠‡∏° Ollama integration
"""

import sys
import os
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget, QLabel, QTextEdit, QHBoxLayout, QGroupBox

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from gui.window import Window
from translation.translator import Translator
from translation.ollama_translator import OllamaTranslator

class OllamaDemoWindow(QMainWindow):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Ollama integration"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Screen Translator - Ollama Demo")
        self.setGeometry(100, 100, 800, 600)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI
        self.setup_ui()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Ollama
        self.test_ollama_connection()
    
    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        info_label = QLabel("""
üöÄ Screen Translator with Ollama Integration

‚ú® ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà:
‚Ä¢ ‡πÉ‡∏ä‡πâ Ollama API ‡∏Å‡∏±‡∏ö Gemma 2:4b model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤
‚Ä¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ English ‚Üí Thai ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô  
‚Ä¢ ‡∏£‡∏±‡∏ô‡∏ö‡∏ô Docker port 11434
‚Ä¢ Fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Google Translate ‡∏´‡∏≤‡∏Å Ollama ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Ollama:
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Docker engine ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
‚Ä¢ Ollama container ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô port 11434
‚Ä¢ Model gemma2:4b ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å pull ‡πÅ‡∏•‡πâ‡∏ß
        """)
        info_label.setWordWrap(True)
        info_label.setStyleSheet("QLabel { background-color: #f0f0f0; padding: 10px; border-radius: 5px; }")
        layout.addWidget(info_label)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        button_layout = QHBoxLayout()
        
        self.main_app_button = QPushButton("üéØ ‡πÄ‡∏õ‡∏¥‡∏î Screen Translator ‡∏´‡∏•‡∏±‡∏Å")
        self.main_app_button.clicked.connect(self.open_main_app)
        self.main_app_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                padding: 12px;
                font-size: 14px;
                font-weight: bold;
                border: none;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        button_layout.addWidget(self.main_app_button)
        
        self.test_button = QPushButton("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Ollama")
        self.test_button.clicked.connect(self.test_ollama_translation)
        self.test_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                padding: 12px;
                font-size: 14px;
                font-weight: bold;
                border: none;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        button_layout.addWidget(self.test_button)
        
        layout.addLayout(button_layout)
        
        # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        result_group = QGroupBox("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
        result_layout = QVBoxLayout(result_group)
        
        self.result_text = QTextEdit()
        self.result_text.setFont(self.font())
        self.result_text.setMaximumHeight(300)
        result_layout.addWidget(self.result_text)
        
        layout.addWidget(result_group)
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö main app
        self.main_window = None
    
    def test_ollama_connection(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Ollama ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô"""
        self.result_text.append("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Ollama...")
        
        try:
            import requests
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            response = requests.get("http://localhost:11434/api/tags", timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                models = data.get('models', [])
                
                self.result_text.append(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Ollama ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                self.result_text.append(f"üìã ‡∏û‡∏ö {len(models)} models:")
                
                gemma_found = False
                for model in models:
                    name = model.get('name', 'unknown')
                    size = model.get('size', 0)
                    size_gb = size // (1024*1024*1024) if size > 0 else 0
                    self.result_text.append(f"   ‚Ä¢ {name} ({size_gb:.1f}GB)")
                      if 'gemma3' in name and '4b' in name:
                        gemma_found = True
                        self.result_text.append(f"   ‚úÖ ‡∏û‡∏ö {name} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
                
                if not gemma_found:
                    self.result_text.append("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö gemma3:4b model")
                    self.result_text.append("üí° ‡∏£‡∏±‡∏ô: ollama pull gemma2:4b")
                    
            else:
                self.result_text.append(f"‚ùå HTTP {response.status_code}: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Ollama")
                
        except requests.exceptions.ConnectionError:
            self.result_text.append("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Ollama")
            self.result_text.append("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
            self.result_text.append("   ‚Ä¢ Docker engine ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
            self.result_text.append("   ‚Ä¢ Ollama container ‡∏ö‡∏ô port 11434")
        except Exception as e:
            self.result_text.append(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        
        self.result_text.append("‚îÄ" * 50)
    
    def test_ollama_translation(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏î‡πâ‡∏ß‡∏¢ Ollama"""
        self.result_text.append("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏î‡πâ‡∏ß‡∏¢ Ollama...")
        
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Ollama translator
            ollama = OllamaTranslator()
            
            if ollama.is_available():
                self.result_text.append("‚úÖ Ollama ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•
                test_texts = [
                    "Hello World!",
                    "How are you today?",
                    "This is a screen translator application.",
                    "Good morning, have a nice day!"
                ]
                
                for text in test_texts:
                    self.result_text.append(f"\nüìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {text}")
                    result = ollama.translate(text)
                    
                    if 'error' not in result:
                        self.result_text.append(f"üîÑ ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô: {result['translated_text']}")
                        self.result_text.append(f"‚ö° Service: {result.get('service', 'unknown')}")
                    else:
                        self.result_text.append(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {result['error']}")
            else:
                self.result_text.append("‚ùå Ollama ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                
        except Exception as e:
            self.result_text.append(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            import traceback
            self.result_text.append(traceback.format_exc())
        
        self.result_text.append("‚îÄ" * 50)
    
    def open_main_app(self):
        """‡πÄ‡∏õ‡∏¥‡∏î Screen Translator ‡∏´‡∏•‡∏±‡∏Å"""
        if self.main_window is None:
            self.main_window = Window(title="Screen Translator with Ollama")
        
        self.main_window.show()
        self.main_window.raise_()
        self.main_window.activateWindow()
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô main app
        service_info = self.main_window.translator.get_service_info()
        status_text = f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÉ‡∏ä‡πâ {service_info['service']} - "
        status_text += "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" if service_info['available'] else "‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        self.main_window.status_label.setText(status_text)
        
        self.result_text.append("üöÄ ‡πÄ‡∏õ‡∏¥‡∏î Screen Translator ‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß")

def main():
    app = QApplication(sys.argv)
    
    print("üöÄ Screen Translator with Ollama Integration")
    print("=" * 60)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    demo_window = OllamaDemoWindow()
    demo_window.show()
    
    print("‚úÖ Demo window ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏•‡πâ‡∏ß")
    print("üí° ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:")
    print("   ‚Ä¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Ollama connection")
    print("   ‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î Screen Translator ‡∏´‡∏•‡∏±‡∏Å")
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
